import "module:std" as std
import "module:spotube_plugin" as spotube
import { SpotifyGqlApi } from '../dependencies/hetu_spotify_gql_client/lib/assets/hetu/spotify_gql_api_client.ht'

import { SpotifyAuthEndpoint } from './segments/auth.ht'
import { AlbumEndpoint } from "./segments/album.ht"
import { ArtistEndpoint } from "./segments/artist.ht"
import { BrowseEndpoint } from "./segments/browse.ht"
import { PlaylistEndpoint } from './segments/playlist.ht'
import { SearchEndpoint } from './segments/search.ht'
import { TrackEndpoint } from './segments/track.ht'
import { UserEndpoint } from './segments/user.ht'
import { CorePlugin } from './segments/core.ht'

var Stream = std.Stream
var HttpClient = std.HttpClient

class SpotifyMetadataProviderPlugin {
  var auth: SpotifyAuthEndpoint
  var api: SpotifyGqlApi

  var album: AlbumEndpoint
  var artist: ArtistEndpoint
  var browse: BrowseEndpoint
  var playlist: PlaylistEndpoint
  var search: SearchEndpoint
  var track: TrackEndpoint
  var user: UserEndpoint
  var core: CorePlugin
  
  construct (){
    api = SpotifyGqlApi()
    auth = SpotifyAuthEndpoint()

    album = AlbumEndpoint(api)
    artist = ArtistEndpoint(api)
    browse = BrowseEndpoint(api, auth)
    playlist = PlaylistEndpoint(api)
    search = SearchEndpoint(api)
    track = TrackEndpoint(api)
    user = UserEndpoint(api)
    core = CorePlugin()

    auth.authStateStream.listen((event) {
      if (auth.credentials != null && auth.credentials["accessToken"] != null) {
        api.setAccessToken(auth.credentials["accessToken"])
        print("[Plugin] Access token definido: ${auth.credentials["accessToken"].substring(0, 10)}...")
      }
    })
    
    // Definir token imediatamente se já estiver disponível
    if (auth.credentials != null && auth.credentials["accessToken"] != null) {
      api.setAccessToken(auth.credentials["accessToken"])
      print("[Plugin] Access token definido na inicialização: ${auth.credentials["accessToken"].substring(0, 10)}...")
    }
  }
}

export { SpotifyMetadataProviderPlugin }